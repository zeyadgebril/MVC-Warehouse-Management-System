// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Warehouse_Management_System.Models;

public partial class dbContext : IdentityDbContext<ApplicationUser>
{
    public dbContext()
    {
    }

    public dbContext(DbContextOptions<dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<InventoryLocation> InventoryLocations { get; set; }

    public virtual DbSet<InventoryRecord> InventoryRecords { get; set; }

    public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductHistory> ProductHistories { get; set; }

    public virtual DbSet<Return> Returns { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Supplier_Product> Supplier_Products { get; set; }

    public virtual DbSet<UserLog> UserLogs { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK__Category__19093A2B06430208");

            entity.Property(e => e.isDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.ParentCategory).WithMany(p => p.InverseParentCategory).HasConstraintName("FK_Category_ParentCategory");
        });

        modelBuilder.Entity<InventoryLocation>(entity =>
        {
            entity.HasKey(e => e.LocationID).HasName("PK__Inventor__E7FEA4775EC1D911");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.InventoryLocations).HasConstraintName("FK_InventoryLocation_Warehouse");
        });

        modelBuilder.Entity<InventoryRecord>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.LocationId }).HasName("PK__Inventor__DA732C845CCED13B");

            entity.Property(e => e.LastUpdated).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Location).WithMany(p => p.InventoryRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryRecord_Location");

            entity.HasOne(d => d.Product).WithMany(p => p.InventoryRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryRecord_Product");
        });

        modelBuilder.Entity<InventoryTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionID).HasName("PK__Inventor__55433A4BF722A5D1");

            entity.Property(e => e.UserID).HasMaxLength(450);

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.FromLocation).WithMany(p => p.InventoryTransactionFromLocations).HasConstraintName("FK_InventoryTransaction_FromLocation");

            entity.HasOne(d => d.Product).WithMany(p => p.InventoryTransactions).HasConstraintName("FK_InventoryTransaction_Product");

            entity.HasOne(d => d.ToLocation).WithMany(p => p.InventoryTransactionToLocations).HasConstraintName("FK_InventoryTransaction_ToLocation");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Product__B40CC6CDF37CD5F1");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LastUpdated).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasConstraintName("FK_Product_Category");
        });

        modelBuilder.Entity<ProductHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryID).HasName("PK__ProductH__4D7B4ADD89C1B525");

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");
            
            entity.Property(e => e.UserID).HasMaxLength(450);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductHistories).HasConstraintName("FK_ProductHistory_Product");
        });

        modelBuilder.Entity<Return>(entity =>
        {
            entity.HasKey(e => e.ReturnID).HasName("PK__Return__F445E9884A26CC22");

            entity.Property(e => e.ReturnDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.OriginalTransaction).WithMany(p => p.Returns).HasConstraintName("FK_Return_InventoryTransaction");

            entity.HasOne(d => d.Product).WithMany(p => p.Returns).HasConstraintName("FK_Return_Product");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.SupplierID).HasName("PK__Supplier__4BE6669461B8CFD2");
        });

        modelBuilder.Entity<Supplier_Product>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.SupplierID }).HasName("PK__Supplier__E0B2A0A4F2FBC631");

            entity.Property(e => e.LeadTimeDays).HasDefaultValue(0);

            entity.HasOne(d => d.Product).WithMany(p => p.Supplier_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supplier_Product_Product");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Supplier_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supplier_Product_Supplier");
        });

        modelBuilder.Entity<UserLog>(entity =>
        {
            entity.HasKey(e => e.LogID).HasName("PK__UserLog__5E5499A8A33FBCA4");

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseID).HasName("PK__Warehous__2608AFD9F8746D1B");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}