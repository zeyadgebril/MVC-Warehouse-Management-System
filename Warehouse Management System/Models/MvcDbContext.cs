// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Warehouse_Management_System.Models;

public partial class MvcDbContext : DbContext
{
    public MvcDbContext()
    {
    }

    public MvcDbContext(DbContextOptions<MvcDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<InventoryLocation> InventoryLocations { get; set; }

    public virtual DbSet<InventoryRecord> InventoryRecords { get; set; }

    public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductHistory> ProductHistories { get; set; }

    public virtual DbSet<Return> Returns { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Supplier_Product> Supplier_Products { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserLog> UserLogs { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // Remove the hardcoded connection string and let Program.cs handle it
        if (!optionsBuilder.IsConfigured)
        {
            // Only configure if not already configured (fallback for development)
            optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=MvcDbContext;Integrated Security=True;TrustServerCertificate=True");
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK__Category__19093A2B48287475");

            entity.Property(e => e.isDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.ParentCategory).WithMany(p => p.InverseParentCategory).HasConstraintName("FK_Category_ParentCategory");
        });

        modelBuilder.Entity<InventoryLocation>(entity =>
        {
            entity.HasKey(e => e.LocationID).HasName("PK__Inventor__E7FEA47751332513");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.InventoryLocations).HasConstraintName("FK_InventoryLocation_Warehouse");
        });

        modelBuilder.Entity<InventoryRecord>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.LocationId }).HasName("PK__Inventor__DA732C84FA66DD1D");

            entity.Property(e => e.LastUpdated).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Location).WithMany(p => p.InventoryRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryRecord_Location");

            entity.HasOne(d => d.Product).WithMany(p => p.InventoryRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryRecord_Product");
        });

        modelBuilder.Entity<InventoryTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionID).HasName("PK__Inventor__55433A4B33D1A124");

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.FromLocation).WithMany(p => p.InventoryTransactionFromLocations).HasConstraintName("FK_InventoryTransaction_FromLocation");

            entity.HasOne(d => d.Product).WithMany(p => p.InventoryTransactions).HasConstraintName("FK_InventoryTransaction_Product");

            entity.HasOne(d => d.ToLocation).WithMany(p => p.InventoryTransactionToLocations).HasConstraintName("FK_InventoryTransaction_ToLocation");

            entity.HasOne(d => d.User).WithMany(p => p.InventoryTransactions).HasConstraintName("FK_InventoryTransaction_User");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Product__B40CC6CD93647248");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LastUpdated).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasConstraintName("FK_Product_Category");
        });

        modelBuilder.Entity<ProductHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryID).HasName("PK__ProductH__4D7B4ADDB74248F1");

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductHistories).HasConstraintName("FK_ProductHistory_Product");

            entity.HasOne(d => d.User).WithMany(p => p.ProductHistories).HasConstraintName("FK_ProductHistory_User");
        });

        modelBuilder.Entity<Return>(entity =>
        {
            entity.HasKey(e => e.ReturnID).HasName("PK__Return__F445E988AD8809C2");

            entity.Property(e => e.ReturnDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.OriginalTransaction).WithMany(p => p.Returns).HasConstraintName("FK_Return_InventoryTransaction");

            entity.HasOne(d => d.ProcessedByNavigation).WithMany(p => p.Returns).HasConstraintName("FK_Return_User");

            entity.HasOne(d => d.Product).WithMany(p => p.Returns).HasConstraintName("FK_Return_Product");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleID).HasName("PK__Role__8AFACE3A6F302402");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.SupplierID).HasName("PK__Supplier__4BE66694D6F46927");
        });

        modelBuilder.Entity<Supplier_Product>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.SupplierID }).HasName("PK__Supplier__E0B2A0A4AC6B34E6");

            entity.Property(e => e.LeadTimeDays).HasDefaultValue(0);

            entity.HasOne(d => d.Product).WithMany(p => p.Supplier_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supplier_Product_Product");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Supplier_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supplier_Product_Supplier");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserID).HasName("PK__User__1788CCAC64EC7E05");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<UserLog>(entity =>
        {
            entity.HasKey(e => e.LogID).HasName("PK__UserLog__5E5499A87A16548E");

            entity.Property(e => e.TimeStamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.UserLogs).HasConstraintName("FK_UserLog_User");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserID, e.RoleID }).HasName("PK__UserRole__AF27604F6E39E438");

            entity.Property(e => e.AssignedDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_Role");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_User");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseID).HasName("PK__Warehous__2608AFD93F18F2C9");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}